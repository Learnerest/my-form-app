{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","err","setErr","Data","setData","rand","Math","round","random","useEffect","length","setOpen","classes","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","useStyles","React","top","left","transform","modalStyle","open","body","style","className","id","map","element","email","Password","FirstName","LastName","Card","opacity","display","flexDirection","justifyContent","alignItems","height","backgroundImage","CardContent","fontSize","margin","textAlign","stlye","FormControl","onSubmit","event","preventDefault","target","value","Password1","Input","type","name","placeholder","required","CardActions","marginTop","marginLeft","Button","endIcon","Send","variant","color","size","rel","href","Modal","borderRadius","onClose","aria-labelledby","aria-describedby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad03dc42.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Input,\n  FormControl,\n  Modal,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Send } from \"@material-ui/icons\";\nimport \"./App.css\";\n\nfunction App() {\n  const [err, setErr] = useState(false);\n  const [Data, setData] = useState([]);\n  useEffect(() => {\n    if (Data.length > 0) {\n      setOpen(true);\n    } else {\n      return;\n    }\n  }, [Data]);\n  const handleForm = (event) => {\n    event.preventDefault();\n    if (event.target.email.value === \"\") {\n    } else if (event.target.Password1.value !== event.target.Password.value) {\n      setData([\"Passwords are not match.\"]);\n      setErr(true);\n    } else {\n      setData([\n        {\n          email: event.target.email.value,\n          FirstName: event.target.FirstName.value,\n          LastName: event.target.LastName.value,\n          Password: event.target.Password.value,\n        },\n      ]);\n      setErr(false);\n    }\n  };\n  function rand() {\n    return Math.round(Math.random() * 20) - 10;\n  }\n\n  function getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      position: \"absolute\",\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid white\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  }));\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n    setData([]);\n    setErr(false);\n  };\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Form Data :</h2>\n      {Data.map((element) =>\n        err ? (\n          <p id=\"simple-modal-description\">{element}</p>\n        ) : (\n          <div>\n            <p>Your Email : {element.email}</p>\n            <p>Your Password : {element.Password}</p>\n            <p> Your First Name : {element.FirstName}</p>\n            <p> Your Last Name : {element.LastName}</p>\n          </div>\n        )\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      <Card\n        style={{\n          opacity: \"1\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"50%\",\n          height: \"100vh\",\n          backgroundImage: \"\",\n        }}\n      >\n        <CardContent\n          style={{\n            flexDirection: \"column\",\n            display: \"flex\",\n            fontSize: \"40px\",\n            opacity: \"1 !important\",\n          }}\n        >\n          <div>\n            {\" \"}\n            <h6 style={{ fontSize: \"30px\", margin: 0, textAlign: \"center\" }}>\n              Sign Up\n            </h6>\n            <hr></hr>\n          </div>\n          <span stlye={{ border: \"20px\" }}></span>\n          <FormControl\n            style={{\n              flexDirection: \"column\",\n              display: \"flex\",\n            }}\n          >\n            <form onSubmit={handleForm}>\n              <div>\n                {\" \"}\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email...*\"\n                  required\n                />\n              </div>\n              <div></div>\n              <Input\n                type=\"string\"\n                name=\"FirstName\"\n                placeholder=\"First Name... **\"\n              />\n              <div>\n                {\" \"}\n                <Input\n                  type=\"string\"\n                  name=\"LastName\"\n                  placeholder=\"Last Name... **\"\n                />\n              </div>\n              <div>\n                {\" \"}\n                <Input\n                  type=\"password\"\n                  name=\"Password\"\n                  placeholder=\"Password...*\"\n                  required\n                />\n              </div>\n              <div>\n                {\" \"}\n                <Input\n                  type=\"password\"\n                  name=\"Password1\"\n                  placeholder=\"Confirm Password*\"\n                  required\n                />\n              </div>\n              <CardActions\n                style={{\n                  justifyContent: \"flex-start\",\n                  marginTop: \"20px\",\n                  marginLeft: \"0px\",\n                }}\n              >\n                <Button\n                  endIcon={<Send>send</Send>}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                >\n                  Send\n                </Button>\n              </CardActions>\n            </form>\n            <div>\n              <hr />\n              <small style={{ fontSize: \"20px\", textAlign: \"right\" }}>\n                Created By @\n                <a\n                  target=\"_blank \"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://github.com/Learnerest\"\n                >\n                  Learnerest | Fatih Kurt\n                </a>\n              </small>\n            </div>\n          </FormControl>\n          <div>\n            <Modal\n              style={{ borderRadius: \"50px\" }}\n              open={open}\n              onClose={handleClose}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              {body}\n            </Modal>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}